here's an example implementation of the binary search algorithm in Python:

def binary_search(arr, x, ascending=True):
    # Initialize variables for the start and end indices of the search range
    left = 0
    right = len(arr) - 1

    # Determine the direction of the search based on the 'ascending' parameter
    direction = 1 if ascending else -1

    # Loop until the search range is exhausted
    while left <= right:
        # Calculate the middle index of the search range
        mid = (left + right) // 2

        # Check if the middle element is the target
        if arr[mid] == x:
            return mid

        # If the middle element is less/greater than the target, search the appropriate half
        elif direction * arr[mid] < direction * x:
            left = mid + 1
        else:
            right = mid - 1

    # If the target was not found, return -1
    return -1
arr = [1, 3, 5, 7, 9]
x = 5
index = binary_search(arr, x)
print(index)  # Output: 2

arr_desc = [9, 7, 5, 3, 1]
index_desc = binary_search(arr_desc, x, ascending=False)
print(index_desc)  # Output: 2 (since '5' is still at index 2 when the list is sorted in descending order)
